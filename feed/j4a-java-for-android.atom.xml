<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Geeky Way - J4A (Java for Android)</title><link href="//thegeekyway.com/" rel="alternate"></link><link href="//thegeekyway.com/feed/j4a-java-for-android.atom.xml" rel="self"></link><id>//thegeekyway.com/</id><updated>2014-07-18T00:35:00+05:30</updated><entry><title>Android Activity LifeCycle</title><link href="//thegeekyway.com/android-activity-lifecycle/" rel="alternate"></link><published>2014-07-18T00:35:00+05:30</published><updated>2014-07-18T00:35:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-07-18:/android-activity-lifecycle/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Activity&lt;/strong&gt; is the base class of an Android &lt;strong&gt;Activity (package android.app). &lt;/strong&gt;An Activity represents a view to the user. For eg. When we open Messaging app to write a new message, it is an Activity. After writing the message, when we open contacts to select the person, it can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Activity&lt;/strong&gt; is the base class of an Android &lt;strong&gt;Activity (package android.app). &lt;/strong&gt;An Activity represents a view to the user. For eg. When we open Messaging app to write a new message, it is an Activity. After writing the message, when we open contacts to select the person, it can be considered as another activity and so on. So in simpler words, anything which completely occupies the screen and is different from the previous screen is called an Activity. In this tutorial we'll get to know about Android Activity Lifecycle.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/Example_sketch.jpg"&gt;&lt;img alt="Example_sketch" src="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/Example_sketch.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Two screens showing different activities&lt;/p&gt;
&lt;p&gt;As shown in previous tutorials, each android activity &lt;strong&gt;extends &lt;/strong&gt;the &lt;strong&gt;android.app.Activity &lt;/strong&gt;class. Activity is a concrete class and contains many methods which can be overwritten so that the activity behaves as per our choice. Such methods are called as lifecycle methods (discussed below).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Each new activity must extend the Activity class (or its direct subclasses) and have corresponding entry in the AndroidManifest.xml file as shown below&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/12.jpg"&gt;&lt;img alt="1" src="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/12.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are many methods to go from one activity to another. Also, we can either choose to &lt;strong&gt;finish &lt;/strong&gt;the previous activity, or leave it as it is.&lt;/p&gt;
&lt;p&gt;LifeCycle of Android Activity&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/rVnSi.jpg"&gt;&lt;img alt="rVnSi" src="http://blog.mycampusnotes.com/wp-content/uploads/2014/07/rVnSi.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Source : Android Developers Website&lt;/p&gt;
&lt;p&gt;Some of you may have seen this screenshot in various books or on websites. Lifecycle is a fundamental concept in android which consists of many methods from &lt;strong&gt;Activity&lt;/strong&gt; class. Any practical application uses at least one lifecycle method. &lt;strong&gt;onCreate() &lt;/strong&gt;is one such method. People knowing about &lt;strong&gt;Java Applets &lt;/strong&gt;must be knowing what a lifecycle methods are, for others you’ll get to know shortly.&lt;/p&gt;
&lt;p&gt;The image shown above gives an overview of basic lifecycle methods. When an application starts, few of them are called. When it exits, different set of methods are called. Similarly when you navigate from one activity to another or come back, some methods are called. Below we have summarized what all methods are called in which situations.&lt;/p&gt;
&lt;p&gt;(The parameters, return types and access specifiers are not shown for now. )&lt;/p&gt;
&lt;p&gt;Below I have summarized what all methods are called in which situations.&lt;/p&gt;
&lt;p&gt;1. When an application starts, these methods are called :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)     onCreate()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)    onStart()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)     onResume().&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. When some other application is called, while your application was running :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)     onPause()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)    onStop()&lt;/strong&gt; are called as new activity completely blocks the screen.&lt;/p&gt;
&lt;p&gt;3. When you go back to your application, which was running previously,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)     onRestart()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)    onStart()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)     onResume()&lt;/strong&gt; are called. Here,it is similar to 1st one except for the difference that &lt;strong&gt;onRestart()&lt;/strong&gt; is called rather than &lt;strong&gt;onCreate()&lt;/strong&gt;. This is because the app exists in memory and just need to be loaded from it.&lt;/p&gt;
&lt;p&gt;4. When the user presses back button to exit the application or there is no memory for the app, the &lt;strong&gt;onDestroy() &lt;/strong&gt;method is called. In normal case, the order of execution for a running application would be,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a)     onPause()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b)    onStop()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c)     onDestroy().&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Difference between &lt;strong&gt;“onPause()”&lt;/strong&gt;   and   &lt;strong&gt;“onPause() + onStop()” &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are some situations when some new activity partially occupies the screen. In such cases, some part of our activity is still visible to the user and is not shifted to &lt;strong&gt;&lt;a href="http://developer.android.com/guide/components/tasks-and-back-stack.html"&gt;BackStack&lt;/a&gt;. &lt;/strong&gt;On the other hand, there are some cases when some new activity or application completely blocks the GUI (or screen), our activity’s GUI is shifted to BackStack. So in the first case (partially occupied), only the &lt;strong&gt;onPause()&lt;/strong&gt; method is called. Whereas in the second case (completely blocked GUI), &lt;strong&gt;onPause() + onStop()&lt;/strong&gt; methods are called. I hope you have now understood the difference between the situations where one or both of them are called.&lt;/p&gt;
&lt;p&gt;In the next tutorial, I’ll show the code for the same thing which we have discussed till now. It will also cover debugging in android using a special class (&lt;strong&gt;android.util.Log&lt;/strong&gt;). Stay tuned for more tutorials.&lt;/p&gt;</content><category term="activity"></category><category term="Android"></category><category term="lifecycle"></category></entry><entry><title>Android Activity lifecycle (Code) &amp; Debugging using LogCat (Android Part – 8)</title><link href="//thegeekyway.com/activity-lifecycle-and-debugging/" rel="alternate"></link><published>2014-07-17T12:37:00+05:30</published><updated>2014-07-17T12:37:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-07-17:/activity-lifecycle-and-debugging/</id><summary type="html">&lt;p&gt;Hello Geeks, hope you have read the &lt;a href="http://www.thegeekyway.com/android-activity-lifecycle/"&gt;previous article&lt;/a&gt; and are clear with the theoretical concepts of an &lt;strong&gt;Android Activity&lt;/strong&gt; and its &lt;strong&gt;Lifecycle.&lt;/strong&gt; Now we will create a code for the same to see what all methods are called in which cases. This code is similar to what you might …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello Geeks, hope you have read the &lt;a href="http://www.thegeekyway.com/android-activity-lifecycle/"&gt;previous article&lt;/a&gt; and are clear with the theoretical concepts of an &lt;strong&gt;Android Activity&lt;/strong&gt; and its &lt;strong&gt;Lifecycle.&lt;/strong&gt; Now we will create a code for the same to see what all methods are called in which cases. This code is similar to what you might have created to study lifecycle of an &lt;strong&gt;Applet in Java (&lt;/strong&gt;for those who are from java background). Create a new Android Application in Eclipse IDE and paste &lt;a class="external" href="http://pastebin.com/pN7bx4ii"&gt;this&lt;/a&gt; code.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;img alt="Android Lifecycle and Debugging" src="//thegeekyway.com/uploads/images/2014/03/command_line_android_debugging.jpg" title="Android Lifecycle and Debugging"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see in the code, that we have extended the &lt;strong&gt;Activity&lt;/strong&gt; class and overwritten all the methods which we had discussed in previous tutorial. In each method, we first call the super class version of the method (using &lt;strong&gt;super&lt;/strong&gt; keyword) and then we write our own statement. Here we use a special class from android.util package. This is the &lt;strong&gt;Log&lt;/strong&gt; class which is used for debugging in android. We use Log.d method in this program which has the following signature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;static void d ( String tag, String message )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First parameter takes the tag (you will shortly get to know what it is) and second takes the message to be printed. Anything printed using &lt;strong&gt;Log.d&lt;/strong&gt; method is shown on the LogCat. LogCat is generally visible at the bottom as shown below:&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/logcat.jpg"&gt;&lt;img alt="logcat" src="//thegeekyway.com/uploads/images/2014/03/logcat.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The above screenshot shows the LogCat under the text area where we code. We can use the position marked as “Extend” in above screenshot to extend the logcat upwards so that it more messages are visible without scrolling.&lt;/p&gt;
&lt;p&gt;Moreover, we also have a &lt;strong&gt;Debug perspective&lt;/strong&gt; in which tabs like Console, Logcat, Variables and program breakpoints as shown here :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/debug_perspective.jpg"&gt;&lt;img alt="debug_perspective" src="//thegeekyway.com/uploads/images/2014/03/debug_perspective-1024x545.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default perspective is &lt;strong&gt;Java&lt;/strong&gt; (extreme left). In the above screenshot, the &lt;strong&gt;Tag&lt;/strong&gt; is nothing but the string visible inside “Tag” column (Lifecycle here) and &lt;strong&gt;Message&lt;/strong&gt; is the string visible inside “Text” column (inside onCreate(), inside onStart() etc).&lt;/p&gt;
&lt;p&gt;For those who are from pure java background, we can also use System.out.println() for debugging, and it will be visible in &lt;strong&gt;Console&lt;/strong&gt; tab, but it is not recommended by Android Developers. Moreover, it may or may not work for some versions.&lt;/p&gt;
&lt;p&gt;When we execute a typical android application in android virtual device, we get many messages from the system (or the virtual device). So sometimes it may become hard to locate our own messages in the LogCat. To overcome this problem, we can create custom LogCat filters so that our custom LogCat reads only specific tags or messages.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/11.jpg"&gt;&lt;img alt="1" src="//thegeekyway.com/uploads/images/2014/03/11.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the above screenshot, we need to focus only on the tags marked above, but the LogCat shows all the tags which are coming from AVD. So we can create custom LogCat filter by clicking on this icon present on left side of LogCat filter.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/add_filter.jpg"&gt;&lt;img alt="add_filter" src="//thegeekyway.com/uploads/images/2014/03/add_filter.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then this dialog box appears&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/create_filter.jpg"&gt;&lt;img alt="create_filter" src="//thegeekyway.com/uploads/images/2014/03/create_filter.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have all tags with name “LifeCycle”, so I have named the tag “LifeCycle”. The message doesn’t matter so I keep it blank. Click OK to create the filter.Now we are clear with basics of debugging and will execute our application with our virtual device and notice the output in LogCat when the Lifecycle methods are called.Execute the application and select your custom filter.&lt;/p&gt;
&lt;p&gt;As per the &lt;a href="http://www.thegeekyway.com/android-activity-lifecycle/"&gt;previous tutorial&lt;/a&gt;, when the application starts, the methods shown below are called:&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/111.jpg"&gt;&lt;img alt="11" src="//thegeekyway.com/uploads/images/2014/03/111.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When we come back to home screen (using Home button on emulator), the GUI is updated and our activity is no more visible so these methods are called:&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/2.jpg"&gt;&lt;img alt="2" src="//thegeekyway.com/uploads/images/2014/03/2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The application still remains in memory, so onDestroy() is not called yet !  Now we come back to our application using Menu and these methods are called in quick succession :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/3.jpg"&gt;&lt;img alt="3" src="//thegeekyway.com/uploads/images/2014/03/3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we use &lt;strong&gt;BACK&lt;/strong&gt; button to exit the application and these methods are called :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/03/4.jpg"&gt;&lt;img alt="4" src="//thegeekyway.com/uploads/images/2014/03/4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So this completes the 7 basic methods in Android Lifecycle. Comment if you have any doubt !&lt;/p&gt;</content><category term="Android"></category><category term="debugging"></category><category term="life cycle"></category></entry><entry><title>Introduction and Syllabus (J4A - 0)</title><link href="//thegeekyway.com/java-for-android-introducion/" rel="alternate"></link><published>2014-02-22T22:54:00+05:30</published><updated>2014-02-22T22:54:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-22:/java-for-android-introducion/</id><summary type="html">&lt;p&gt;Hello geeks, &lt;strong&gt;(J4A) Java for Android&lt;/strong&gt; is a series of tutorials for those who have good knowledge of C++ and want to switch to android without going into details of Core Java. So here we'll discuss ONLY THOSE features of JAVA (keywords, classes, concepts) which are used in android also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello geeks, &lt;strong&gt;(J4A) Java for Android&lt;/strong&gt; is a series of tutorials for those who have good knowledge of C++ and want to switch to android without going into details of Core Java. So here we'll discuss ONLY THOSE features of JAVA (keywords, classes, concepts) which are used in android also. Some may think that these tutorials serve nothing and its better to learn these features in parallel with android, but if you know these concepts in advance, it will ultimately accelerate your efforts towards android application development and you will not need to LOOK BACK while developing for android. ECE students interested in android can also go for these tutorials. Please note that these tutorials don't make you Java Programmer !&lt;/p&gt;
&lt;p&gt;Topics from JAVA included in this tutorial series are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Moving from C++ to JAVA &amp;amp; Installing and JDK.&lt;/li&gt;
&lt;li&gt;A simple java program to explain various simple concepts.&lt;/li&gt;
&lt;li&gt;Revising data types, if, for, switch, Typecasting, operators, arrays in Java.&lt;/li&gt;
&lt;li&gt;Concept of class, method, references, access specifiers, keywords (static, final, extends, implements).&lt;/li&gt;
&lt;li&gt;Packages and Interfaces (Overview only).&lt;/li&gt;
&lt;li&gt;Exception Handling and Multithreading (Both Detailed).&lt;/li&gt;
&lt;li&gt;String class, its functions and java.lang.CharSequence interface.&lt;/li&gt;
&lt;li&gt;Overview of important Java API used in Android (java.util, java.io, java.net).&lt;/li&gt;
&lt;li&gt;Event  Based Programming and Anonymous Inner Classes.&lt;/li&gt;
&lt;li&gt;Introduction to Java Beans Architecture to understand various classes/components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please note that above list of topics are tentative and may be added / removed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/moving-c-java/" title="link"&gt;Link to First Tutorial&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category><category term="java"></category></entry></feed>