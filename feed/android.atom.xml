<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Geeky Way - Android</title><link href="//thegeekyway.com/" rel="alternate"></link><link href="//thegeekyway.com/feed/android.atom.xml" rel="self"></link><id>//thegeekyway.com/</id><updated>2014-02-14T23:20:00+05:30</updated><entry><title>Second simple Android Application Part 3 (Android-Part 6)</title><link href="//thegeekyway.com/secondapp3/" rel="alternate"></link><published>2014-02-14T23:20:00+05:30</published><updated>2014-02-14T23:20:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-14:/secondapp3/</id><summary type="html">&lt;p&gt;Welcome back geeks, so after pasting &lt;a href="http://pastebin.com/zs00wWNd"&gt;this code&lt;/a&gt;, you would be having the MainActivity.java file like this :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/131.jpg"&gt;&lt;img alt="13" src="//thegeekyway.com/uploads/images/2014/02/131.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this screenshot, notice the highlighted part on the left. The Eclipse IDE is showing some errors at some specific lines (line no. 9 10,17,18 and so on). Now we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back geeks, so after pasting &lt;a href="http://pastebin.com/zs00wWNd"&gt;this code&lt;/a&gt;, you would be having the MainActivity.java file like this :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/131.jpg"&gt;&lt;img alt="13" src="//thegeekyway.com/uploads/images/2014/02/131.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this screenshot, notice the highlighted part on the left. The Eclipse IDE is showing some errors at some specific lines (line no. 9 10,17,18 and so on). Now we’ll use &lt;u&gt;Quick Fix&lt;/u&gt; feature of Eclipse to include necessary classes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on left corner of line no. 9 and Eclipse with provide &lt;strong&gt;fixes&lt;/strong&gt; for this error. Click on the first solution, i.e. import &lt;strong&gt;android.widget.Button.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Similarly click on left corner of line no. 10 to import &lt;strong&gt;android.widget.EditText&lt;/strong&gt;. So now two of required classes have been imported, you will notice that in import statements.&lt;/li&gt;
&lt;li&gt;Click on left corner of line no. 21 to import View.OnClickListener    (third solution to import &lt;strong&gt;android.view.View.OnClickListene&lt;/strong&gt;r)&lt;/li&gt;
&lt;li&gt;Click on left corner of line no. 27 to import &lt;strong&gt;android.widget.Toast&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So now our necessary packages and classes have been imported and we can start understand the actual code.&lt;/p&gt;
&lt;p&gt;First we create a button reference and two edit text references globally within the class. This part required no explanation. Inside the onCreate method we map all of them to the layout file which we had created. We use the method &lt;strong&gt;findViewById&lt;/strong&gt; to find the components by their ID as defined in the XML file. So we map the Button and two EditTexts with their respective IDs.&lt;/p&gt;
&lt;p&gt;Next we add an &lt;strong&gt;onClickListener&lt;/strong&gt; to the button. This is similar to the &lt;strong&gt;ActionListener&lt;/strong&gt; from Swing API. It defines the action to be performed when the button is clicked. We have used the &lt;strong&gt;anonymous inner class version&lt;/strong&gt; of this method. Alternatively, we may even use &lt;strong&gt;implement&lt;/strong&gt; keyword to implement &lt;strong&gt;OnClickListener&lt;/strong&gt; interface and define the required method ( &lt;strong&gt;public void onClick()&lt;/strong&gt; ).&lt;/p&gt;
&lt;p&gt;The onClick() method takes a &lt;strong&gt;View&lt;/strong&gt; as an argument. As discussed previously also, View is directly or indirectly superclass of all android components. So we can use the View parameter to obtain view Id, and other properties of the View which generates the event.&lt;/p&gt;
&lt;p&gt;Inside the method we call makeText method of the Toast class. This method is used to create a simple dialog like view which displays the input. This is similar to JOptionPane class from Swing API where we have few ready-made dialogs. The arguments inside Toast method specify the &lt;strong&gt;application context&lt;/strong&gt;, the &lt;strong&gt;string&lt;/strong&gt; to be displayed and the &lt;strong&gt;time&lt;/strong&gt; for which the dialog is displayed (Toast.LENGTH_SHORT). In the end, show method is called from the Toast context to show this dialog which we have just created.&lt;/p&gt;
&lt;p&gt;So this is how this simple application works. This was an effort to introduce the onClickListener to our audience. Similarly different components have different type of listeners like onCheckedChangedListener for toggle based events.&lt;/p&gt;
&lt;p&gt;Execute the application on Android Virtual Device, Bluestacks or directly on your phone. This application when executed on AVD 4.3 gives the following output :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/141.jpg"&gt;&lt;img alt="14" src="//thegeekyway.com/uploads/images/2014/02/141.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content><category term="Android"></category></entry><entry><title>Second simple Android Application Part 2 (Android-Part 5)</title><link href="//thegeekyway.com/secondapp2/" rel="alternate"></link><published>2014-02-14T22:32:00+05:30</published><updated>2014-02-14T22:32:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-14:/secondapp2/</id><summary type="html">&lt;p&gt;Welcome back geeks, this tutorial is a continuation of &lt;a href="http://www.thegeekyway.com/secondapp1/" title="previous"&gt;previous&lt;/a&gt;&lt;a href="http://www.thegeekyway.com/secondapp1/" title="this"&gt; &lt;/a&gt;tutorial. So please read the previous one if you have not read it.&lt;/p&gt;
&lt;p&gt;So we had created a simple layout and it looked something like this :&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;img alt="7" src="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Double click on the button to change the text of the button, now the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome back geeks, this tutorial is a continuation of &lt;a href="http://www.thegeekyway.com/secondapp1/" title="previous"&gt;previous&lt;/a&gt;&lt;a href="http://www.thegeekyway.com/secondapp1/" title="this"&gt; &lt;/a&gt;tutorial. So please read the previous one if you have not read it.&lt;/p&gt;
&lt;p&gt;So we had created a simple layout and it looked something like this :&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;img alt="7" src="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Double click on the button to change the text of the button, now the window will switch to XML version of the layout. In the XML file, the part of button definition is highlighted.&lt;/p&gt;
&lt;p&gt;Move to the top of XML file and we’ll understand each thing written in the file. The first two lines are just references to website.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/8.jpg"&gt;&lt;img alt="8" src="//thegeekyway.com/uploads/images/2014/02/8.jpg"&gt;&lt;/a&gt;&lt;strong&gt;1.  &lt;/strong&gt; The default layout being used by eclipse here is &lt;strong&gt;Relative Layout.&lt;/strong&gt; As obvious from the name, in Relative Layout each component is aligned with respect to its previous component(s) which was added to layout.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.  &lt;/strong&gt; android:layout_width=”match_parent”. This code sets the width of Relative Layout to cover the complete width of layout. Similarly the next line sets the width to complete width of the layout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.  &lt;/strong&gt; The next four lines of code just provide some padding to all the sides using constant value defined in dimension ( \@dimen ).&lt;/p&gt;
&lt;p&gt;The next code fragment adds an EditText (or textfield) to the layout whose attributes are :&lt;/p&gt;
&lt;p&gt;a)   android:id=”\@id/editText1”: This id is used to refer this textfield in java program, as well as to align other components using this EditText.&lt;/p&gt;
&lt;p&gt;b)   android:layout_width=”wrap_content” :  The width of component just wraps the content, or simply just sufficient to store a simple line of text. Similar is for height of EditText.&lt;/p&gt;
&lt;p&gt;c)   android:layout_alignParentLeft="true" : The component is aligned from left of its parent. This value is set to true to apply these changes. Similar is for next line. So by these two lines, the EditText is aligned to &lt;u&gt;Top-Left&lt;/u&gt; of Parent (or the layout/screen).&lt;/p&gt;
&lt;p&gt;d)   android:layout_marginLeft="39dp" : A slight margin is given towards left side. &lt;strong&gt;dp&lt;/strong&gt; is &lt;strong&gt;density pixels&lt;/strong&gt;. It is better to specify spacing using &lt;u&gt;dp&lt;/u&gt; rather than &lt;u&gt;px&lt;/u&gt; (pixels) because px is not same for different android phones, whereas dp is same for different android phones. Similar is done by next line to set top margin.&lt;/p&gt;
&lt;p&gt;e)   android:ems=”10” : Simply means that the EditText (text field) can contain 10 characters. To Experiment with ems, try changing its value and see corresponding change in the Graphical Layout.&lt;/p&gt;
&lt;p&gt;We can specify many more attributes for a text field. Use &lt;strong&gt;Ctrl+Space&lt;/strong&gt; in Eclipse to view more related properties. For eg. write this in eclipse and press &lt;strong&gt;Ctrl+Space&lt;/strong&gt; to view more attributes.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/9.jpg"&gt;&lt;img alt="9" src="//thegeekyway.com/uploads/images/2014/02/9.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When you write &lt;u&gt;android:&lt;/u&gt; on a blank line and press Ctrl+Space to view all these attributes. Similarly we can also use this shortcut to view suggestions in Java program also.&lt;/p&gt;
&lt;p&gt;In the second EditText, everything is same except &lt;u&gt;inputType &lt;/u&gt;attribute which is set to “&lt;u&gt;textPassword&lt;/u&gt;”. This sets the input mode to password, so the text input by user is set to bullets (to hide text).&lt;/p&gt;
&lt;p&gt;To experiment, you can use Ctrl+Space shortcut to see more available &lt;u&gt;inputTypes&lt;/u&gt; (shown below).&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/10.jpg"&gt;&lt;img alt="10" src="//thegeekyway.com/uploads/images/2014/02/10.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For button, all the attributes are self-explanatory and similar to those explained previously except the &lt;u&gt;android:text &lt;/u&gt;attribute. This attribute sets the Text which is displayed on the button and is visible to the user. If you notice carefully, you’ll see an exclamatory mark on the left corner of line where text for button is specified.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/111.jpg"&gt;&lt;img alt="11" src="//thegeekyway.com/uploads/images/2014/02/111.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When you bring mouse pointer close to the mark, you see the notice the warning “Hardcoded string ”Button”, should use \@string resource”. For now just ignore this warning, it would be discussed later where you will specify the String using strings.xml file.Now our XML work is complete and we’ll move to the &lt;strong&gt;MainActivity.java&lt;/strong&gt; file to start the coding part.&lt;/p&gt;
&lt;p&gt;Out Java file contains this much code for now :&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/121.jpg"&gt;&lt;img alt="12" src="//thegeekyway.com/uploads/images/2014/02/121.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;People familiar with java will understand the first two statements (package and import). Next is our class which extends the Activity class. In android, each new screen is an &lt;strong&gt;Activity,&lt;/strong&gt; so it extends the Activity class which is present in &lt;strong&gt;android.app&lt;/strong&gt; package. Click on ‘+’ sign on the left import to see other imported packages.&lt;/p&gt;
&lt;p&gt;The first method inside our class is onCreate method. This is a part of Android life cycle. Java programmers must be knowing &lt;strong&gt;Applet Life Cycle methods.&lt;/strong&gt; Similarly, an android application also has a &lt;a href="http://i.stack.imgur.com/rVnSi.png"&gt;life cycle&lt;/a&gt; (which would be discussed in further tutorials). For now, just consider that onCreate is just an initialization method for our activity. In the first line of code, it simply calls the super class method. The second line sets the layout of our activity to &lt;u&gt;R.layout.activity_main&lt;/u&gt;. This is nothing but a reference to the XML file just created by us and stored in layout folder. It is accessed by its defined in R.java file (auto-generated java file). The second method creates a menu which is rather not required here, so either let it be there or remove it. We’ll discuss about that method later. Paste &lt;a href="http://pastebin.com/zs00wWNd"&gt;this code&lt;/a&gt;to your application and in the next tutorial we’ll understand the java code and finish this second simple android application.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/secondapp3" title="link"&gt; &lt;p style="font-size: xx-large;"&gt;Link to next tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category></entry><entry><title>Second simple Android Application Part 1 (Android-Part 4)</title><link href="//thegeekyway.com/secondapp1/" rel="alternate"></link><published>2014-02-14T21:26:00+05:30</published><updated>2014-02-14T21:26:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-14:/secondapp1/</id><summary type="html">&lt;p&gt;Hey Geeks ! Hope you all have gone through previous tutorials and are clear with the basics of android. Here we’ll create our second simple android application which will consist of creating our own layout and a bit of java coding. As discussed previously, the &lt;strong&gt;layout of our android application …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey Geeks ! Hope you all have gone through previous tutorials and are clear with the basics of android. Here we’ll create our second simple android application which will consist of creating our own layout and a bit of java coding. As discussed previously, the &lt;strong&gt;layout of our android application is written in XML file&lt;/strong&gt;, so we’ll create the layout with a button and two text fields. When the button is pressed, the contents of text fields are shown. For demonstration, the two text fields input the ‘user Id’ and ‘password’ from the user and they are displayed to the user when the button is pressed..&lt;/p&gt;
&lt;p&gt;So open Eclipse and create a new Android Project from File-&gt; New -&gt; Android project (or use keyboard shortcut Alt+Shift+N).&lt;/p&gt;
&lt;p&gt;Fill in the name of application as “UserId” or something similar. Fill in package name and project name. Let everything else remain &lt;strong&gt;default&lt;/strong&gt; and finish to get a similar screen.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/19.jpg"&gt;&lt;img alt="1" src="//thegeekyway.com/uploads/images/2014/02/19.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Eclipse opens two files by default for us (highlighted in above pic):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MainActivity.java: Here, java code for activity is written. &lt;strong&gt;Activity&lt;/strong&gt; is something similar to java frame. Or in simpler words, for now you can consider each new screen as a new Activity.&lt;/li&gt;
&lt;li&gt;Activity_main.xml: XML file contains the components added by us and their positioning or simply the layout of the activity. Usually, each &lt;strong&gt;new activity&lt;/strong&gt; will have its own layout defined in its respective XML file.&lt;/li&gt;
&lt;/ol&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/24.jpg"&gt;&lt;img alt="2" src="//thegeekyway.com/uploads/images/2014/02/24.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Just  to refresh, MainActivity.java file is stored in &lt;strong&gt;src&lt;/strong&gt; folder and layout files like activit_main.xml are stored in &lt;strong&gt;res/layout&lt;/strong&gt; folder. Click on the activity_main.xml and the following screen is opened by Eclipse.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/31.jpg"&gt;&lt;img alt="3" src="//thegeekyway.com/uploads/images/2014/02/31.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;One important part is highlighted in this screenshot, &lt;u&gt;Graphical Layout&lt;/u&gt; tab and &lt;u&gt;activity_main&lt;/u&gt; tab. &lt;strong&gt;Graphical Layout&lt;/strong&gt; tab is used to view the graphical state of layout or to drag and drop components onto your activity. To view what is happening on the coding side, click on &lt;strong&gt;activity_main.xml&lt;/strong&gt; tab.&lt;/p&gt;
&lt;p&gt;For most of the part, you can use drag and drop to add components to your activity, but being a programmer you must know what is actually happening in the XML file. Also, when you are working with layouts and for better positioning of components, you will need to have a good understanding of what is happening on the XML side, so that you can customize the components from the code also. So we’ll use drag and drop for adding components and at the same time we’ll also understand what changes are taking place in XML file.&lt;/p&gt;
&lt;p&gt;By clicking all the component types (Form widgets, textfields, layouts etc.), you can have an overview of what all components you have (you must close the upper folder to view lower folder due to limited space in eclipse window).&lt;/p&gt;
&lt;p&gt;Now we’ll start creating layout for our application. Click on “Hello World” on the screen so that it is selected as shown below.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/4.jpg"&gt;&lt;img alt="4" src="//thegeekyway.com/uploads/images/2014/02/4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now right click and Delete this TextView (or use Delete key from keyboard). Now what’s a TextView? In Android, all components are subclasses of a class called &lt;strong&gt;View.&lt;/strong&gt; Or put in simpler words, in Android every component is a View. Each component whether a &lt;u&gt;button&lt;/u&gt;,&lt;u&gt; text field&lt;/u&gt; etc. are directly or indirectly subclasses of View.&lt;/p&gt;
&lt;p&gt;Coming back to our TextView, it is a passive component like a JLabel in Java. It simply displays some text and doesn’t interact with the user other than this. After removing the ‘Hello World’ TextView, we are left with only the title of the application. So now we’ll start dragging components from the left panel to the layout.&lt;/p&gt;
&lt;p&gt;Expand the &lt;u&gt;Text Fields&lt;/u&gt; section and use your mouse to drag a &lt;u&gt;Plain Text&lt;/u&gt; and a &lt;u&gt;Password&lt;/u&gt; field on to your layout.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/5.jpg"&gt;&lt;img alt="5" src="//thegeekyway.com/uploads/images/2014/02/5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/6.jpg"&gt;&lt;img alt="6" src="//thegeekyway.com/uploads/images/2014/02/6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next, use the &lt;u&gt;Form Widgets&lt;/u&gt; to insert a button under these two fields, preferably in the middle of the screen.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;img alt="7" src="//thegeekyway.com/uploads/images/2014/02/7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So now our layout is ready with two textfields and a button. We don't want to make this tutorial lengthy for you guys, so we'll just stop here and do check next tutorial to proceed further.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/secondapp2/" title="link"&gt; &lt;p style="font-size: xx-large"&gt;Link to next tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category></entry><entry><title>Executing your Android Application (AVD's) (Android-Part 3)</title><link href="//thegeekyway.com/executeandroid/" rel="alternate"></link><published>2014-02-05T23:31:00+05:30</published><updated>2014-02-05T23:31:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-05:/executeandroid/</id><summary type="html">&lt;p&gt;[Hello Geeks, hope you have gone through &lt;a href="http://www.thegeekyway.com/firstandroidapp/" title="prev post"&gt;this post&lt;/a&gt;and have a good understanding of Android projects before proceeding further. To test / debug our Android Application, we can use any of available methods :]{style="font-size: 14px;line-height: 1.5em"}&lt;br&gt;
1. We can use the Android Virtual Device (we'll create one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[Hello Geeks, hope you have gone through &lt;a href="http://www.thegeekyway.com/firstandroidapp/" title="prev post"&gt;this post&lt;/a&gt;and have a good understanding of Android projects before proceeding further. To test / debug our Android Application, we can use any of available methods :]{style="font-size: 14px;line-height: 1.5em"}&lt;br&gt;
1. We can use the Android Virtual Device (we'll create one shortly) to execute this application.&lt;br&gt;
2. We can directly copy the APK to the phone to test the application.&lt;br&gt;
3. We can also use an Android Emulator like Bluestacks to test our application. Benefit of using Bluestacks is that it starts much faster than AVDs.&lt;/p&gt;
&lt;p&gt;1. We'll discuss first option in detail. The second option require a simple setup. On most devices running Android 3.2 or older, you can find the option under Settings &gt; Applications &gt; Development. On Android 4.0 and newer, it's in Settings &gt; Developer options. (&lt;a href="http://developer.android.com/tools/device.html" title="Developers Google"&gt;Detailed Explanation here&lt;/a&gt;).The third option required downloading and installing &lt;strong&gt;&lt;a href="http://www.bluestacks.com/" title="Bluestacks"&gt;Bluestacks emulator&lt;/a&gt;.&lt;/strong&gt; Bluestacks is a free android &lt;a href="http://en.wikipedia.org/wiki/Emulator" title="meaning of emulator"&gt;emulator&lt;/a&gt; available for both Windows and Mac platform. It can be used to run most of the android applications including Whatsapp, games etc.&lt;/p&gt;
&lt;p&gt;To create new &lt;strong&gt;AVD&lt;/strong&gt; &lt;strong&gt;(Android Virtual Device)&lt;/strong&gt; follow these steps &lt;strong&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goto Windows Menu -&gt; Android Virtual Device Manager.&lt;/li&gt;
&lt;li&gt;Click 'New' to create a new Device.&lt;/li&gt;
&lt;li&gt;Fill in mandatory fields like AVD Name, Device (preferrably Nexus 4, 4.7"as it is a portrait device), Target API 18.&lt;/li&gt;
&lt;li&gt;Fill in Internal Storage and SD Card size as 200 MB (Enough for applications). Press Ok to create that device. Now close the AVD window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we will be able to use this device for executing the Android Applications we create. But we may also opt for Mobile Phone / Bluestacks method as they are very fast. The AVDs take a long time to start, approx 2 minutes on core i7 4th generation processor to over 5-7 minutes on old systems. If you still prefer executing application using AVDs then you must start AVD when you start the Eclipse IDE, so that the AVD loads while you code your application.&lt;/p&gt;
&lt;p&gt;To execute the first Android Project Goto "Run" from Menu Bar and select first option, or you could simply use Ctrl+ F11. Choose your AVD, which would be the one just created, or your phone(if attached) / bluestacks (if installed).Preview of this application (Executed on Bluestacks) is shows here&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/15.jpg"&gt;&lt;img alt="1" src="//thegeekyway.com/uploads/images/2014/02/15-1024x604.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;A similar application with two labels and buttons executed on Android 4.0 Virtual Device is as shown below : &lt;a href="//thegeekyway.com/uploads/images/2014/02/18.jpg"&gt;&lt;img alt="1" src="//thegeekyway.com/uploads/images/2014/02/18.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This was a very short tutorial to setup AVD and execute your first android application.In the next Article, we will create simple application by creating its GUI in layout.xml file and obtaining IDs in the JAVA code. Till then stay tuned &amp;amp; comment if you have any suggestions/doubts.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/secondapp1/" title="link"&gt; &lt;p style="font-size: xx-large"&gt;Link to next tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category></entry><entry><title>Anatomy of First Android Application (Android-Part 2)</title><link href="//thegeekyway.com/firstandroidapp/" rel="alternate"></link><published>2014-02-03T22:22:00+05:30</published><updated>2014-02-03T22:22:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-03:/firstandroidapp/</id><summary type="html">&lt;p&gt;Hello Geeks, hope you all have read the &lt;a href="http://www.thegeekyway.com/setting-up-eclipse-ide-for-android-application-development/" title="Setup Android IDE"&gt;previous post&lt;/a&gt; for setting up IDE, here we explain what each folder of a newly created Android Application means. As soon as you follow the steps described in previous post, a simple android application with the application name and a predefined string …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello Geeks, hope you all have read the &lt;a href="http://www.thegeekyway.com/setting-up-eclipse-ide-for-android-application-development/" title="Setup Android IDE"&gt;previous post&lt;/a&gt; for setting up IDE, here we explain what each folder of a newly created Android Application means. As soon as you follow the steps described in previous post, a simple android application with the application name and a predefined string is created.The whole picture looks something like this (click on res/layout/activity_main.xml):&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/17.jpg"&gt;&lt;img alt="New Proj" src="//thegeekyway.com/uploads/images/2014/02/17.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The basic structure of an android application looks like this :&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/16.jpg"&gt;&lt;img alt="package overview" src="//thegeekyway.com/uploads/images/2014/02/16.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The highlighted part in the above image shows expanded form of a Android Project. On the top left of tree, we have the name of the Application itself. Under that we have the following folders :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src :&lt;/strong&gt; SRC means SOURCE. Source folder stores the source of your application. This folder stores name of the package and then the source file(s). Here we have MainActivity.java as the main source file, which opens on Right side.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gen&lt;/strong&gt; : Gen means Generated Java Files. The folder stores generated Java files like R.java . These are AUTO GENERATED JAVA FILES which should not be edited.If there is any error in project (xml/source), the file is not generated. So we must remove  The files like R.java are used to map layout files from &lt;strong&gt;Layout file (XML File) to MainActivity file (JAVA File).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Android 4.3 and Android Private Libraries :&lt;/strong&gt; These are source files given by google, normally we do not require to do anything from these files. These are just imported, as required.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assets :&lt;/strong&gt; This folder stores the text files/HTMLs or databases related to your application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bin :&lt;/strong&gt; As clear from the name, bin folder stores the binary output of your application i.e. the &lt;strong&gt;APK file&lt;/strong&gt; which is sufficient to execute independently on your android device.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lib :&lt;/strong&gt; This folder contains one file by default (android support file). We can add any JAR files in this folder which may be used by our application. People who have worked with JAVA must be knowing how to include external jar files in application (by pasting in specific directories in C:/program files/java). This is just similar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;res :&lt;/strong&gt; res folder contains all the resources in your application. There are accessible in your application using its ID which is maintained in &lt;strong&gt;R.java (auto-generated file).&lt;/strong&gt; Most of the people are often confused between res and assets, but here's the difference : &lt;strong&gt;Files inside assets folder are accessible in your java file as if it exists in the same folder, No IDs are created for asset files inside R.java. Whereas files in res folder are accessible using their IDs defined in R.java.&lt;/strong&gt; Here is the explanation of each subfolder of &lt;strong&gt;res.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first five subfolders in res (&lt;strong&gt;drawable&lt;/strong&gt; types) consists of images of different sizes which may be used in your android application. Here &lt;strong&gt;hdpi&lt;/strong&gt; means &lt;strong&gt;High Density Picture, mdpi&lt;/strong&gt; means &lt;strong&gt;Medium Density Picture&lt;/strong&gt; and so on&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next folder&lt;strong&gt;(layout)&lt;/strong&gt; is the most important which consists of the layout of our application. By default, it consists of one file (activity_main.xml). As we create more activities, more files are added here as per our specification.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;menu&lt;/strong&gt; folder can be used to create a custom menu inside an Android Application. It is not discussed here in detail.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;values&lt;/strong&gt; folder contains many XML files which define constant objects for your Android Application. Our main concentration remains on &lt;strong&gt;strings.XML&lt;/strong&gt; file which stores constant strings. These strings are accessed in Java application using their ID (eg. R.string.app_name) where &lt;strong&gt;string&lt;/strong&gt; is the &lt;strong&gt;strings.xml&lt;/strong&gt; file and &lt;strong&gt;app_name&lt;/strong&gt; is the constant string &lt;strong&gt;defined in that xml file&lt;/strong&gt; (app_name defines the name of android app).&lt;/p&gt;
&lt;p&gt;The other versions of values folder are used for different APIs versions. Other than this we have the AndroidManifest.xml file which defined basic information about the Android Application.&lt;/p&gt;
&lt;p&gt;Eclipse allows two views of an XML file which can be toggled by the TAB given below the XML file as shown here :&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/14.jpg"&gt;&lt;img alt="AndroidManifest.XML" src="//thegeekyway.com/uploads/images/2014/02/14.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The last tab &lt;strong&gt;(AndroidManifest.xml)&lt;/strong&gt; represents the XML view of the file whereas the first four tabs &lt;strong&gt;(Manifest, Application,Permissions and Instrumentation)&lt;/strong&gt; represent the GUI view of the file. This is the advantage of using &lt;strong&gt;Eclipse IDE,&lt;/strong&gt; i.e. for adding some new information to manifest, when we don't know the syntax, we can use the first four tabs so that we enter the information using GUI and Eclipse automatically adds the same information to the XML file.&lt;/p&gt;
&lt;p&gt;The rest of the files describe basic properties of the file and do not require immediate discussion. So we defer this to future posts, they would be discussed as or when required. The next article describes how to create an Android Virtual Machine on your system to execute this created Application.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/executeandroid/" title="link"&gt; &lt;p style="font-size: xx-large"&gt;Link to next tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category></entry><entry><title>Setting Up Eclipse IDE for Android Application Development (Android-Part 1)</title><link href="//thegeekyway.com/setting-up-eclipse-ide-for-android-application-development/" rel="alternate"></link><published>2014-02-02T22:33:00+05:30</published><updated>2014-02-02T22:33:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-02-02:/setting-up-eclipse-ide-for-android-application-development/</id><summary type="html">&lt;p&gt;Here is a complete tutorial to setup Eclipse IDE. Hope you have seen the &lt;a href="http://thegeekyway.com/beginandroid" title="Creating your first Android Application"&gt;first tutorial&lt;/a&gt; and have installed the required tools (ADT + Eclipse &amp;amp; JDK).After installing JDK, extract the Android SDK to a folder and you will get something like this.&lt;/p&gt;
&lt;p&gt;Few screenshots related to Eclipse may vary due …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a complete tutorial to setup Eclipse IDE. Hope you have seen the &lt;a href="http://thegeekyway.com/beginandroid" title="Creating your first Android Application"&gt;first tutorial&lt;/a&gt; and have installed the required tools (ADT + Eclipse &amp;amp; JDK).After installing JDK, extract the Android SDK to a folder and you will get something like this.&lt;/p&gt;
&lt;p&gt;Few screenshots related to Eclipse may vary due to different version, but the overall meaning remains same.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/1.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Please note that Eclipse is just an Integrated Development Environment&lt;/strong&gt; which supports a wide variety of development ranging from C/C++/Java/Android to Electronics. Our Eclispe is a one, tailored for Android. The Eclipse and Android SDK should be kept in the same folder as shown above so that eclipse IDE is able to detect the SDK and use it for further development. If you attempt to change the location of Eclipse or SDK, or rename the SDK, you get the following error.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/11.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/11.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So, now open eclipse folder and there you will find a file called &lt;strong&gt;eclipse.exe&lt;/strong&gt;. Open that file, a window appears which shows option to select the &lt;strong&gt;Workspace.&lt;/strong&gt; Workspace is a path where your entire project including source, APK and all other files are stored. After selecting preferences, something like this will appear.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/2.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To start creating a new project, either use the menubar (Flile -&gt; New) or use keyboard shortcut (Alt+Shift+N). From the drop down menu, select &lt;strong&gt;Android Application Project.&lt;/strong&gt; A new Dialog box appears. Fill in the basic application details to continue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Application name :  &lt;/strong&gt;It is the name of the application as visible in your android phone&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project name :&lt;/strong&gt; It is the name of the project which will appear in the &lt;a href="http://www.ibm.com/developerworks/library/wa-mobappdev1/Figure17.jpg" title="Example of tree structure"&gt;tree structure&lt;/a&gt; in left panel of Eclipse&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Package name :&lt;/strong&gt; People familiar with Java must be knowing the concept of a package (or a namespace in C++/C#). It is a unique identifier for your application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best thing about IDEs is the way they explain each and every information. For eg, when we point on &lt;strong&gt;Package name,&lt;/strong&gt; it shows the following text information as a help text explaining everything about the field.&lt;/p&gt;
&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/02/21.jpg"&gt;&lt;img alt="Eclipse new Project" src="//thegeekyway.com/uploads/images/2014/02/21.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The other four fields are self explanatory, so are not explained here. Press &lt;strong&gt;Next &lt;/strong&gt; to continue. You get the following dialog box.&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/22.jpg"&gt;&lt;img alt="second screen" src="//thegeekyway.com/uploads/images/2014/02/22.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The options are explained here  :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create custom launcher icon : &lt;/strong&gt; This allows to choose a custom Application Icon for your application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create Activity : &lt;/strong&gt;Activity in an android application is somewhat similar to a JFrame/Frame in Java. An activity simply represents a screen in Android. &lt;strong&gt;Activity&lt;/strong&gt; is also a class in Android. You must check this option so that eclipse creates a dummy activity (with required methods)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;p style="font-size: small"&gt;Mark this project as library : &lt;/p&gt;&lt;/strong&gt;Check this option if you want this project to act as library (or source) for another project (not to be given much stress now).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create Project in Workspace :&lt;/strong&gt; This option allows to create all the files of the project inside the workspace which was selected when Eclipse started. This should be &lt;strong&gt;checked&lt;/strong&gt; to store the files at that place and &lt;strong&gt;unchecked&lt;/strong&gt; if you want to store the files anywhere else.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add project to working sets : &lt;/strong&gt;This option is also related to linking multiple projects so should not be given much stress now.Click &lt;strong&gt;Next&lt;/strong&gt; to continue. Now we get the following screen :&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
   &lt;a href="//thegeekyway.com/uploads/images/2014/02/23.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/23.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can configure the icon for you application in this window. Try changing different colors, text,clipart etc and it would be clear to you. Most of the things are self explanatory and are not discussed here. Click next to continue. You will get the following screen.&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/12.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/12.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now here we select the type of activity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Blank Activity :&lt;/strong&gt; It is an activity where you get empty implementation of required methods and status bar of android phone is visible. So it is not a fullscreen activity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full Screen Activity :&lt;/strong&gt; Usually games utilize complete screen and come under this category. Select this option so that this occupies the complete screen (including status bar).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Master / Detailed Flow : &lt;/strong&gt;This allows users to create activity in such a way so that it is able to display an object as well as information related to each object. Moreover, it created two activities, i.e.  &lt;strong&gt;master&lt;/strong&gt; and &lt;strong&gt;detailed&lt;/strong&gt; fragment respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click Next to continue. We get the following screen&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/1.png"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/1.png"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Activity Name :&lt;/strong&gt; This is the name of new blank activity which starts the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layout Name :&lt;/strong&gt; This specifies the layout for this activity.  &lt;strong&gt;Please note that layout of an android activity is defined in XML inside layout folder.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;p style="font-size: small"&gt;&lt;strong&gt;Navigation Type : &lt;/strong&gt; Specifies the type of navigation the user will use to navigate while using the app. See options for more information which are self explanatory. Let it be none for now.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;Click Finish to start with the actual process.The following window opens in Eclipse.&lt;br&gt;
&lt;div style="text-align:center" markdown="1"&gt;
&lt;a href="//thegeekyway.com/uploads/images/2014/02/13.jpg"&gt;&lt;img alt="" src="//thegeekyway.com/uploads/images/2014/02/13-1024x608.jpg"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So now we have started with a simple Android Application. On the left hand side we have a list of folders which contain libraries and files related to our application. On the right hand side, we have the currently opened file. By default it shoes the main JAVA file of your application. Before starting coding, setting layouts etc. we require  a complete understanding of all the folder on the left side. So in our next post tomorrow, we'll completely describe about each folder about what they mean and how to use them.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/firstandroidapp/" title="link"&gt; &lt;p style="font-size: xx-large"&gt;Link to next Tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category><category term="development"></category><category term="Tutorial"></category></entry><entry><title>Beginning Android, for Java / C++ programmers (Android-Part 0)</title><link href="//thegeekyway.com/beginandroid/" rel="alternate"></link><published>2014-01-27T20:35:00+05:30</published><updated>2014-01-27T20:35:00+05:30</updated><author><name>gagan93</name></author><id>tag:thegeekyway.com,2014-01-27:/beginandroid/</id><summary type="html">&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/01/01.jpg5a51b1a1-4063-466c-945d-6178840074d0Larger.jpg" title="Beginning Android"&gt;&lt;img alt="Beginning Android" src="//thegeekyway.com/uploads/images/2014/01/01.jpg5a51b1a1-4063-466c-945d-6178840074d0Larger-300x225.jpg" title="Beginning Android"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Most of the people now have Android devices. This attracts a lot of people to begin career as an Android Developer. Although creating games with sophisticated graphics isn't easy, but creating a simple Android app is. What you need to start Android Application Development is good knowledge of OOPS concept …&lt;/p&gt;</summary><content type="html">&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;a href="//thegeekyway.com/uploads/images/2014/01/01.jpg5a51b1a1-4063-466c-945d-6178840074d0Larger.jpg" title="Beginning Android"&gt;&lt;img alt="Beginning Android" src="//thegeekyway.com/uploads/images/2014/01/01.jpg5a51b1a1-4063-466c-945d-6178840074d0Larger-300x225.jpg" title="Beginning Android"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Most of the people now have Android devices. This attracts a lot of people to begin career as an Android Developer. Although creating games with sophisticated graphics isn't easy, but creating a simple Android app is. What you need to start Android Application Development is good knowledge of OOPS concept.&lt;/p&gt;
&lt;p&gt;The method used by most of the people to start Android is using Eclipse as an IDE (Integrated Development Environment). The experienced Android programmers may opt for Android Studio. Sometimes its just the matter of choice/comfort with a particular IDE.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite knowledge  : &lt;/strong&gt;Many people go for Android after doing Core Java. Few try it with C++ and/or basic programming knowledge. While it is possible to start with Android with a good understanding of OOP Concepts (Object Oriented Programming), but those having knowledge of Core Java always have advantage because Android uses rich  Java libraries like &lt;strong&gt;java.io, java.net, java.lang, java.util&lt;/strong&gt; etc. A bit XML is also required but simple interface provided by Eclipse can handle this part.&lt;/p&gt;
&lt;p&gt;Fore people from C++ background, it will require a bit of effort to learn Java &amp;amp; join hands with Android. There is an option to use Android NDK (Native Development Kit) using which you can use C++ native code which runs on Android phones. But as recommended by most of the developers, writing an entire Android application in Native code is &lt;strong&gt;not the right way. &lt;/strong&gt; Generally, NDK is used to create some performance critical code or for obfuscating a part of APK so that it is not easily decompiled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android, Decompilation and Solution : &lt;/strong&gt; As most of the Java developers must be knowing, CLASS files are easily decompiled using a simple and free software, same is the case with Android. Android binary files (APK) are easily decompiled. Some effective methods like Obfuscation are used to protect the code which modifies the code in such a way so that it is not easily readable by programmers. Same programs and methods apply to Android also as it is based on Java. Obfuscation tools are available for Android which makes it difficult for source to be leaked completely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE for Android Beginners : &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To begin development, we just need Java Development Kit (JDK) &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html"&gt;available here&lt;/a&gt; and Android SDK (Software Development Kit)  &lt;a href="http://developer.android.com/sdk/index.html?utm_source=weibolife"&gt;&lt;u&gt;available here&lt;/u&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install the JDK using default settings and extract the Android SDK to required location.&lt;/li&gt;
&lt;li&gt;Open eclipse.exe from Eclipse folder from the extracted location.&lt;/li&gt;
&lt;li&gt;The IDE loads within few seconds and opens a window where we can start creating a new project.* Basics of Android and First Simple Android Application will be discussed in next tutorial.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://www.thegeekyway.com/setting-up-eclipse-ide-for-android-application-development/" title="Link"&gt; &lt;p style="font-size: xx-large"&gt;Link to First Android Tutorial&lt;/p&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Android"></category><category term="java"></category><category term="programming"></category></entry></feed>